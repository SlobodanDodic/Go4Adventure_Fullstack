generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String   @unique @default(uuid())
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt()
  username       String   @unique
  email          String   @unique
  hashedPassword String
  token          String?  @unique
  isActivated    Boolean  @default(false)

  profile  Profile?
  posts    Post[]
  comments Comment[]
  likes    Like[]
  role     Role      @default(USER)
}

model Profile {
  id         String  @unique @default(uuid())
  info       String?
  profileImg String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique
}

model Post {
  id          String   @unique @default(uuid())
  published   DateTime @default(now())
  group       String
  category    String
  subcategory String
  title       String
  price       String
  editorText  String
  location    String

  images   Gallery[]
  likes    Like[]
  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Gallery {
  id         String   @unique @default(uuid())
  created_at DateTime @default(now())
  path       String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
}

model Comment {
  id              String   @unique @default(uuid())
  created_at      DateTime @default(now())
  body            String
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  commentAuthor   User     @relation(fields: [commentAuthorId], references: [id], onDelete: Cascade)
  commentAuthorId String
}

model Like {
  id         String   @unique @default(uuid())
  created_at DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}
